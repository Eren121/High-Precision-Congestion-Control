find_package(reflectcpp REQUIRED)

if(reflectcpp_FOUND)
  build_lib(
    LIBNAME rdma
    SOURCE_FILES
      model/broadcom-egress-queue.cc
      model/cn-header.cc
      model/custom-header.cc
      model/int-header.cc
      model/pause-header.cc
      model/pint.cc
      model/qbb-channel.cc
      model/qbb-header.cc
      model/qbb-helper.cc
      model/qbb-net-device.cc
      model/qbb-remote-channel.cc
      model/rdma-bth.cc
      app/rdma-allgather.cc
      app/rdma-allgather-helper.cc
      model/rdma-hw.cc
      model/ag-recovery.cc
      model/rdma-queue-pair.cc
      model/rdma-reliable-qp.cc
      model/rdma-unreliable-qp.cc
      model/switch-mmu.cc
      model/switch-node.cc
      model/data-rate-ops.cc
      model/rdma-seq-header.cc
      model/rdma-random.cc
      app/rdma-unicast-app.cc
      app/rdma-unicast-app-helper.cc
      app/rdma-flow.cc
      app/rdma-network.cc
      helper/rdma-reflection-helper.cc
      helper/rdma-helper.cc
      app/rdma-qlen-monitor.cc
    HEADER_FILES
      model/broadcom-egress-queue.h
      model/cn-header.h
      model/custom-header.h
      model/int-header.h
      model/pause-header.h
      model/pint.h
      model/qbb-channel.h
      model/qbb-header.h
      model/qbb-helper.h
      model/qbb-net-device.h
      model/qbb-remote-channel.h
      model/rdma-bth.h
      app/rdma-allgather.h
      app/rdma-allgather-helper.h
      model/rdma.h
      model/rdma-hw.h
      model/rdma-queue-pair.h
      model/rdma-reliable-qp.h
      model/rdma-unreliable-qp.h
      model/switch-mmu.h
      model/switch-node.h
      model/trace-format.h
      model/data-rate-ops.h
      model/rdma-seq-header.h
      model/rdma-random.h
      model/ag-circle.h
      model/ag-recovery.h
      app/sim-setting.h
      app/rdma-unicast-app.h
      app/rdma-unicast-app-helper.h
      app/rdma-flow.h
      app/rdma-network.h
      helper/json.h
      helper/rdma-reflection-helper.h
      helper/filesystem.h
      helper/rdma-helper.h
      app/rdma-qlen-monitor.h
    LIBRARIES_TO_LINK reflectcpp
                      ${libinternet}
                      ${libnetwork}
                      ${libpoint-to-point}
                      ${libapplications}
  )
endif()